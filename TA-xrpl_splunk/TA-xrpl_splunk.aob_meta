{"basic_builder": {"appname": "TA-xrpl_splunk", "friendly_name": "xrpl_splunk", "version": "1.0.0", "author": "xrPumpKing", "description": "Add-on to ingest and parse XRPL data", "theme": "#f07a35", "large_icon": "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", "small_icon": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAADHUlEQVRYR+2YeU8qQRDEGxQVPFBBRVEBT77/p1HBC9TgfYGKQDS/zuvNqLDA+uIjL/Zf6u7MVFdV12wMyYBVaMDwyGAD2tnZefsXjOXzeY+YDwz9Avojx//N0NjYmPYZCoWk2WxKo9Ho24aBGQqHw7KxsSEvLy/y/PwsMzMzUq1W5ezsTEEsLS3JxMSE3NzcCECj0agUi0V5e/OflcCA4vG43N/f98wArAHw8fHRd01gQLCzv7/vdZxKpQSQMMDhrVZLLi4u5OHhwZNxbW1N1/hVX4CQaXJyUubm5pR+KpPJSK1Wk6urqy/nACyXyykw5KQAdXt7K3d3d23l6wvQ1taW7O3tKQMwYb9z0Obmphr58PDQ8xC+OTg4kPHxcZWrUql4a3m/UCh8aaIvQKurq1IqlXQTJDOWIpGIAuQ5AKjt7W3Z3d2VqakplQ1ANGIeymazcnR09D1ASHV5eakdM9Kvr6+6YS+AeA/5jMHZ2VmdwM/VF0MmkXXPZtPT0zIyMqKbw5CZOJFIKEPpdFqenp7UN/Y+/nH3cEH1DIgsoStyxphKJpNyfX3dNVs40OQ276ysrCjb5FhgQCzGB6Ojo7oR7NBtL0VQ0oxrZqRnQgMBYmJIZEYfz9TrdQXH35HEr9z33GHA6BYHtr5nyQCBVHTpprR17gfIZdK8g2TEwOf7rmdAHGimJtxsvN0s6gTKHXFMfnp6+iHDAknGIkxMIruskNTHx8e+khlomOL+I7O4jG3yAgNaXl6Wk5MTXW9dx2IxvbfwVLvCcwAhFtwcckM2MCAmxNKZ7CGFGV38gLHpnuuDGh4e1nTmHdLdWAIgDK2vr3t7BQZknxDz8/N6a5NNCwsLnmQAK5fLur8ZH2B4jjuQgiWyywL0M6t9mdpdzCFcA3QLkKGhIc0mJofiq2BxcVHOz8+VOZjBb3Z1dDJdYEDtTGmmN0DuxxjsArITMwYwMCAOIOTIEQ4ho/jZ4gBpyC48BhA8Z/7zG8nAgNptiqeQDrBM3Y9+5PsGzzce/lWGvoHDW/oLqBuLHRnqtvAnng/2/4d+goFuZ7wDz5AlQ39GFyAAAAAASUVORK5CYII=", "visible": true, "tab_version": "4.1.3", "tab_build_no": "0", "build_no": 1}, "data_input_builder": {"datainputs": [{"index": "default", "sourcetype": "AccountTx_transactions", "interval": "30", "use_external_validation": true, "streaming_mode_xml": true, "name": "accounttx_transactions", "title": "AccountTx_Transactions", "description": "AccountTx transactions", "type": "customized", "parameters": [{"required": true, "name": "account_r_address_", "label": "Account (r address)", "default_value": "", "placeholder": "e.g. rBXV9a9ApwNvB9uwYEqY9xXbPq2va4YJCC", "help_string": "Classic address format starting with r", "type": "text", "format_type": "text", "value": ""}], "data_inputs_options": [{"type": "customized_var", "name": "account_r_address_", "title": "Account (r address)", "description": "Classic address format starting with r", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "", "placeholder": "e.g. rBXV9a9ApwNvB9uwYEqY9xXbPq2va4YJCC"}], "code": "\n# encoding = utf-8\n\nimport os\nimport sys\nimport time\nimport datetime\n\n'''\n    IMPORTANT\n    Edit only the validate_input and collect_events functions.\n    Do not edit any other part in this file.\n    This file is generated only once when creating the modular input.\n'''\n'''\n# For advanced users, if you want to create single instance mod input, uncomment this method.\ndef use_single_instance_mode():\n    return True\n'''\n\ndef validate_input(helper, definition):\n    \"\"\"Implement your own validation logic to validate the input stanza configurations\"\"\"\n    # This example accesses the modular input variable\n    # account_r_address_ = definition.parameters.get('account_r_address_', None)\n    pass\n\ndef collect_events(helper, ew):\n    \"\"\"Implement your data collection logic here\n\n    # The following examples get the arguments of this input.\n    # Note, for single instance mod input, args will be returned as a dict.\n    # For multi instance mod input, args will be returned as a single value.\n    opt_account_r_address_ = helper.get_arg('account_r_address_')\n    # In single instance mode, to get arguments of a particular input, use\n    opt_account_r_address_ = helper.get_arg('account_r_address_', stanza_name)\n\n    # get input type\n    helper.get_input_type()\n\n    # The following examples get input stanzas.\n    # get all detailed input stanzas\n    helper.get_input_stanza()\n    # get specific input stanza with stanza name\n    helper.get_input_stanza(stanza_name)\n    # get all stanza names\n    helper.get_input_stanza_names()\n\n    # The following examples get options from setup page configuration.\n    # get the loglevel from the setup page\n    loglevel = helper.get_log_level()\n    # get proxy setting configuration\n    proxy_settings = helper.get_proxy()\n    # get account credentials as dictionary\n    account = helper.get_user_credential_by_username(\"username\")\n    account = helper.get_user_credential_by_id(\"account id\")\n    # get global variable configuration\n    global_userdefined_global_var = helper.get_global_setting(\"userdefined_global_var\")\n\n    # The following examples show usage of logging related helper functions.\n    # write to the log for this modular input using configured global log level or INFO as default\n    helper.log(\"log message\")\n    # write to the log using specified log level\n    helper.log_debug(\"log message\")\n    helper.log_info(\"log message\")\n    helper.log_warning(\"log message\")\n    helper.log_error(\"log message\")\n    helper.log_critical(\"log message\")\n    # set the log level for this modular input\n    # (log_level can be \"debug\", \"info\", \"warning\", \"error\" or \"critical\", case insensitive)\n    helper.set_log_level(log_level)\n\n    # The following examples send rest requests to some endpoint.\n    response = helper.send_http_request(url, method, parameters=None, payload=None,\n                                        headers=None, cookies=None, verify=True, cert=None,\n                                        timeout=None, use_proxy=True)\n    # get the response headers\n    r_headers = response.headers\n    # get the response body as text\n    r_text = response.text\n    # get response body as json. If the body text is not a json string, raise a ValueError\n    r_json = response.json()\n    # get response cookies\n    r_cookies = response.cookies\n    # get redirect history\n    historical_responses = response.history\n    # get response status code\n    r_status = response.status_code\n    # check the response status, if the status is not sucessful, raise requests.HTTPError\n    response.raise_for_status()\n\n    # The following examples show usage of check pointing related helper functions.\n    # save checkpoint\n    helper.save_check_point(key, state)\n    # delete checkpoint\n    helper.delete_check_point(key)\n    # get checkpoint\n    state = helper.get_check_point(key)\n\n    # To create a splunk event\n    helper.new_event(data, time=None, host=None, index=None, source=None, sourcetype=None, done=True, unbroken=True)\n    \"\"\"\n\n    '''\n    # The following example writes a random number as an event. (Multi Instance Mode)\n    # Use this code template by default.\n    import random\n    data = str(random.randint(0,100))\n    event = helper.new_event(source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=helper.get_sourcetype(), data=data)\n    ew.write_event(event)\n    '''\n\n    '''\n    # The following example writes a random number as an event for each input config. (Single Instance Mode)\n    # For advanced users, if you want to create single instance mod input, please use this code template.\n    # Also, you need to uncomment use_single_instance_mode() above.\n    import random\n    input_type = helper.get_input_type()\n    for stanza_name in helper.get_input_stanza_names():\n        data = str(random.randint(0,100))\n        event = helper.new_event(source=input_type, index=helper.get_output_index(stanza_name), sourcetype=helper.get_sourcetype(stanza_name), data=data)\n        ew.write_event(event)\n    '''\n", "customized_options": [{"name": "account_r_address_", "value": "rBXV9a9ApwNvB9uwYEqY9xXbPq2va4YJCC"}], "uuid": "702d6e4bfa9a48d4a8f0481db3eaf91c"}]}, "field_extraction_builder": {"AccountTx_transactions": {"data_format": "json"}}, "global_settings_builder": {"global_settings": {"log_settings": {}}}, "sourcetype_builder": {"AccountTx_transactions": {"metadata": {"event_count": 0, "data_input_name": "accounttx_transactions", "extractions_count": 0, "cims_count": 0}}}, "validation": {"validators": ["best_practice_validation", "data_model_mapping_validation", "field_extract_validation", "app_cert_validation"], "status": "job_finished", "validation_id": "v_1685874687_91", "progress": 1.0}}